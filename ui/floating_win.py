# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

from utils.utils import display_image
from src.src import floating_win_on, floating_win_off

class canvas_win(QWidget):
    def __init__(self):
        super().__init__()
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        # self.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents, True)
        #self.setStyleSheet('QWidget {background-color: #FFFFFF; color: #000000;}')

class canvas_label(QLabel):
    def __init__(self, parent, event):
        QLabel.__init__(self, parent)
        # self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.BypassWindowManagerHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        # self.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents, True)
        self.setStyleSheet('QLabel {background-color: #FFFFFF; color: #000000;}')
        self.event = event

    def mousePressEvent(self, e):
        if e.buttons() == Qt.LeftButton:
            self.event()

class B_form(canvas_win):
    def __init__(self, main):
        super().__init__()
        self.main = main
        self.setWindowTitle("懸浮視窗")
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.BypassWindowManagerHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        self.resize(100,100)
        self.move(630,948)
        self.label_icon = canvas_label(self, self.main.event.btn_start)
        self.label_icon.setGeometry(QtCore.QRect(0, 0, 100, 100))
        display_image(self.label_icon, floating_win_off)

    def closeEvent(self, event):
        # self.__deleteItemsOfLayout()
        pass

    def set_working(self, working:bool):
        if working:
            display_image(self.label_icon, floating_win_on)
        else:
            display_image(self.label_icon, floating_win_off)